/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.stm.BeginGameReq', null, global);
goog.exportSymbol('proto.stm.GameStarted', null, global);
goog.exportSymbol('proto.stm.GuessFrame', null, global);
goog.exportSymbol('proto.stm.PlayerFrame', null, global);
goog.exportSymbol('proto.stm.Prompt', null, global);
goog.exportSymbol('proto.stm.PromptResponseFrame', null, global);
goog.exportSymbol('proto.stm.PromptResponseInputFrame', null, global);
goog.exportSymbol('proto.stm.RoleFrame', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stm.Prompt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stm.Prompt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.stm.Prompt.displayName = 'proto.stm.Prompt';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stm.Prompt.prototype.toObject = function(opt_includeInstance) {
  return proto.stm.Prompt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stm.Prompt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stm.Prompt.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    contents: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stm.Prompt}
 */
proto.stm.Prompt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stm.Prompt;
  return proto.stm.Prompt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stm.Prompt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stm.Prompt}
 */
proto.stm.Prompt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stm.Prompt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stm.Prompt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stm.Prompt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stm.Prompt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContents();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.stm.Prompt.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.stm.Prompt.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string contents = 2;
 * @return {string}
 */
proto.stm.Prompt.prototype.getContents = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.stm.Prompt.prototype.setContents = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stm.RoleFrame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stm.RoleFrame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.stm.RoleFrame.displayName = 'proto.stm.RoleFrame';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stm.RoleFrame.prototype.toObject = function(opt_includeInstance) {
  return proto.stm.RoleFrame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stm.RoleFrame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stm.RoleFrame.toObject = function(includeInstance, msg) {
  var f, obj = {
    guesser: jspb.Message.getFieldWithDefault(msg, 1, false),
    out: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stm.RoleFrame}
 */
proto.stm.RoleFrame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stm.RoleFrame;
  return proto.stm.RoleFrame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stm.RoleFrame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stm.RoleFrame}
 */
proto.stm.RoleFrame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGuesser(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOut(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stm.RoleFrame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stm.RoleFrame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stm.RoleFrame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stm.RoleFrame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuesser();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getOut();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool guesser = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.stm.RoleFrame.prototype.getGuesser = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.stm.RoleFrame.prototype.setGuesser = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool out = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.stm.RoleFrame.prototype.getOut = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.stm.RoleFrame.prototype.setOut = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stm.GuessFrame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stm.GuessFrame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.stm.GuessFrame.displayName = 'proto.stm.GuessFrame';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stm.GuessFrame.prototype.toObject = function(opt_includeInstance) {
  return proto.stm.GuessFrame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stm.GuessFrame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stm.GuessFrame.toObject = function(includeInstance, msg) {
  var f, obj = {
    promptId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    responseId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stm.GuessFrame}
 */
proto.stm.GuessFrame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stm.GuessFrame;
  return proto.stm.GuessFrame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stm.GuessFrame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stm.GuessFrame}
 */
proto.stm.GuessFrame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPromptId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stm.GuessFrame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stm.GuessFrame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stm.GuessFrame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stm.GuessFrame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPromptId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResponseId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string prompt_id = 1;
 * @return {string}
 */
proto.stm.GuessFrame.prototype.getPromptId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.stm.GuessFrame.prototype.setPromptId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string response_id = 2;
 * @return {string}
 */
proto.stm.GuessFrame.prototype.getResponseId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.stm.GuessFrame.prototype.setResponseId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stm.PromptResponseFrame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stm.PromptResponseFrame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.stm.PromptResponseFrame.displayName = 'proto.stm.PromptResponseFrame';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stm.PromptResponseFrame.prototype.toObject = function(opt_includeInstance) {
  return proto.stm.PromptResponseFrame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stm.PromptResponseFrame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stm.PromptResponseFrame.toObject = function(includeInstance, msg) {
  var f, obj = {
    promptId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    response: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stm.PromptResponseFrame}
 */
proto.stm.PromptResponseFrame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stm.PromptResponseFrame;
  return proto.stm.PromptResponseFrame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stm.PromptResponseFrame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stm.PromptResponseFrame}
 */
proto.stm.PromptResponseFrame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPromptId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stm.PromptResponseFrame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stm.PromptResponseFrame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stm.PromptResponseFrame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stm.PromptResponseFrame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPromptId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResponse();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string prompt_id = 1;
 * @return {string}
 */
proto.stm.PromptResponseFrame.prototype.getPromptId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.stm.PromptResponseFrame.prototype.setPromptId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string response = 2;
 * @return {string}
 */
proto.stm.PromptResponseFrame.prototype.getResponse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.stm.PromptResponseFrame.prototype.setResponse = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stm.PromptResponseInputFrame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stm.PromptResponseInputFrame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.stm.PromptResponseInputFrame.displayName = 'proto.stm.PromptResponseInputFrame';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stm.PromptResponseInputFrame.prototype.toObject = function(opt_includeInstance) {
  return proto.stm.PromptResponseInputFrame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stm.PromptResponseInputFrame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stm.PromptResponseInputFrame.toObject = function(includeInstance, msg) {
  var f, obj = {
    promptId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stm.PromptResponseInputFrame}
 */
proto.stm.PromptResponseInputFrame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stm.PromptResponseInputFrame;
  return proto.stm.PromptResponseInputFrame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stm.PromptResponseInputFrame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stm.PromptResponseInputFrame}
 */
proto.stm.PromptResponseInputFrame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPromptId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stm.PromptResponseInputFrame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stm.PromptResponseInputFrame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stm.PromptResponseInputFrame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stm.PromptResponseInputFrame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPromptId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string prompt_id = 1;
 * @return {string}
 */
proto.stm.PromptResponseInputFrame.prototype.getPromptId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.stm.PromptResponseInputFrame.prototype.setPromptId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stm.PlayerFrame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.stm.PlayerFrame.oneofGroups_);
};
goog.inherits(proto.stm.PlayerFrame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.stm.PlayerFrame.displayName = 'proto.stm.PlayerFrame';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.stm.PlayerFrame.oneofGroups_ = [[2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.stm.PlayerFrame.FrameCase = {
  FRAME_NOT_SET: 0,
  STARTED: 2,
  GUESS: 3,
  PROMPT_RESPONSE_INPUT: 4,
  PROMPT_RESPONSE: 5,
  ROLE_CHANGE: 6
};

/**
 * @return {proto.stm.PlayerFrame.FrameCase}
 */
proto.stm.PlayerFrame.prototype.getFrameCase = function() {
  return /** @type {proto.stm.PlayerFrame.FrameCase} */(jspb.Message.computeOneofCase(this, proto.stm.PlayerFrame.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stm.PlayerFrame.prototype.toObject = function(opt_includeInstance) {
  return proto.stm.PlayerFrame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stm.PlayerFrame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stm.PlayerFrame.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    started: (f = msg.getStarted()) && proto.stm.GameStarted.toObject(includeInstance, f),
    guess: (f = msg.getGuess()) && proto.stm.GuessFrame.toObject(includeInstance, f),
    promptResponseInput: (f = msg.getPromptResponseInput()) && proto.stm.PromptResponseInputFrame.toObject(includeInstance, f),
    promptResponse: (f = msg.getPromptResponse()) && proto.stm.PromptResponseFrame.toObject(includeInstance, f),
    roleChange: (f = msg.getRoleChange()) && proto.stm.RoleFrame.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stm.PlayerFrame}
 */
proto.stm.PlayerFrame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stm.PlayerFrame;
  return proto.stm.PlayerFrame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stm.PlayerFrame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stm.PlayerFrame}
 */
proto.stm.PlayerFrame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = new proto.stm.GameStarted;
      reader.readMessage(value,proto.stm.GameStarted.deserializeBinaryFromReader);
      msg.setStarted(value);
      break;
    case 3:
      var value = new proto.stm.GuessFrame;
      reader.readMessage(value,proto.stm.GuessFrame.deserializeBinaryFromReader);
      msg.setGuess(value);
      break;
    case 4:
      var value = new proto.stm.PromptResponseInputFrame;
      reader.readMessage(value,proto.stm.PromptResponseInputFrame.deserializeBinaryFromReader);
      msg.setPromptResponseInput(value);
      break;
    case 5:
      var value = new proto.stm.PromptResponseFrame;
      reader.readMessage(value,proto.stm.PromptResponseFrame.deserializeBinaryFromReader);
      msg.setPromptResponse(value);
      break;
    case 6:
      var value = new proto.stm.RoleFrame;
      reader.readMessage(value,proto.stm.RoleFrame.deserializeBinaryFromReader);
      msg.setRoleChange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stm.PlayerFrame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stm.PlayerFrame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stm.PlayerFrame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stm.PlayerFrame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStarted();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.stm.GameStarted.serializeBinaryToWriter
    );
  }
  f = message.getGuess();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.stm.GuessFrame.serializeBinaryToWriter
    );
  }
  f = message.getPromptResponseInput();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.stm.PromptResponseInputFrame.serializeBinaryToWriter
    );
  }
  f = message.getPromptResponse();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.stm.PromptResponseFrame.serializeBinaryToWriter
    );
  }
  f = message.getRoleChange();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.stm.RoleFrame.serializeBinaryToWriter
    );
  }
};


/**
 * optional string player_id = 1;
 * @return {string}
 */
proto.stm.PlayerFrame.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.stm.PlayerFrame.prototype.setPlayerId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional GameStarted started = 2;
 * @return {?proto.stm.GameStarted}
 */
proto.stm.PlayerFrame.prototype.getStarted = function() {
  return /** @type{?proto.stm.GameStarted} */ (
    jspb.Message.getWrapperField(this, proto.stm.GameStarted, 2));
};


/** @param {?proto.stm.GameStarted|undefined} value */
proto.stm.PlayerFrame.prototype.setStarted = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.stm.PlayerFrame.oneofGroups_[0], value);
};


proto.stm.PlayerFrame.prototype.clearStarted = function() {
  this.setStarted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.stm.PlayerFrame.prototype.hasStarted = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GuessFrame guess = 3;
 * @return {?proto.stm.GuessFrame}
 */
proto.stm.PlayerFrame.prototype.getGuess = function() {
  return /** @type{?proto.stm.GuessFrame} */ (
    jspb.Message.getWrapperField(this, proto.stm.GuessFrame, 3));
};


/** @param {?proto.stm.GuessFrame|undefined} value */
proto.stm.PlayerFrame.prototype.setGuess = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.stm.PlayerFrame.oneofGroups_[0], value);
};


proto.stm.PlayerFrame.prototype.clearGuess = function() {
  this.setGuess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.stm.PlayerFrame.prototype.hasGuess = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PromptResponseInputFrame prompt_response_input = 4;
 * @return {?proto.stm.PromptResponseInputFrame}
 */
proto.stm.PlayerFrame.prototype.getPromptResponseInput = function() {
  return /** @type{?proto.stm.PromptResponseInputFrame} */ (
    jspb.Message.getWrapperField(this, proto.stm.PromptResponseInputFrame, 4));
};


/** @param {?proto.stm.PromptResponseInputFrame|undefined} value */
proto.stm.PlayerFrame.prototype.setPromptResponseInput = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.stm.PlayerFrame.oneofGroups_[0], value);
};


proto.stm.PlayerFrame.prototype.clearPromptResponseInput = function() {
  this.setPromptResponseInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.stm.PlayerFrame.prototype.hasPromptResponseInput = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PromptResponseFrame prompt_response = 5;
 * @return {?proto.stm.PromptResponseFrame}
 */
proto.stm.PlayerFrame.prototype.getPromptResponse = function() {
  return /** @type{?proto.stm.PromptResponseFrame} */ (
    jspb.Message.getWrapperField(this, proto.stm.PromptResponseFrame, 5));
};


/** @param {?proto.stm.PromptResponseFrame|undefined} value */
proto.stm.PlayerFrame.prototype.setPromptResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.stm.PlayerFrame.oneofGroups_[0], value);
};


proto.stm.PlayerFrame.prototype.clearPromptResponse = function() {
  this.setPromptResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.stm.PlayerFrame.prototype.hasPromptResponse = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional RoleFrame role_change = 6;
 * @return {?proto.stm.RoleFrame}
 */
proto.stm.PlayerFrame.prototype.getRoleChange = function() {
  return /** @type{?proto.stm.RoleFrame} */ (
    jspb.Message.getWrapperField(this, proto.stm.RoleFrame, 6));
};


/** @param {?proto.stm.RoleFrame|undefined} value */
proto.stm.PlayerFrame.prototype.setRoleChange = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.stm.PlayerFrame.oneofGroups_[0], value);
};


proto.stm.PlayerFrame.prototype.clearRoleChange = function() {
  this.setRoleChange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.stm.PlayerFrame.prototype.hasRoleChange = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stm.BeginGameReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stm.BeginGameReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.stm.BeginGameReq.displayName = 'proto.stm.BeginGameReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stm.BeginGameReq.prototype.toObject = function(opt_includeInstance) {
  return proto.stm.BeginGameReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stm.BeginGameReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stm.BeginGameReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stm.BeginGameReq}
 */
proto.stm.BeginGameReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stm.BeginGameReq;
  return proto.stm.BeginGameReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stm.BeginGameReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stm.BeginGameReq}
 */
proto.stm.BeginGameReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stm.BeginGameReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stm.BeginGameReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stm.BeginGameReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stm.BeginGameReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string room_id = 1;
 * @return {string}
 */
proto.stm.BeginGameReq.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.stm.BeginGameReq.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stm.GameStarted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.stm.GameStarted.repeatedFields_, null);
};
goog.inherits(proto.stm.GameStarted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.stm.GameStarted.displayName = 'proto.stm.GameStarted';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.stm.GameStarted.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stm.GameStarted.prototype.toObject = function(opt_includeInstance) {
  return proto.stm.GameStarted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stm.GameStarted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stm.GameStarted.toObject = function(includeInstance, msg) {
  var f, obj = {
    promptsList: jspb.Message.toObjectList(msg.getPromptsList(),
    proto.stm.Prompt.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stm.GameStarted}
 */
proto.stm.GameStarted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stm.GameStarted;
  return proto.stm.GameStarted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stm.GameStarted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stm.GameStarted}
 */
proto.stm.GameStarted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.stm.Prompt;
      reader.readMessage(value,proto.stm.Prompt.deserializeBinaryFromReader);
      msg.addPrompts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stm.GameStarted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stm.GameStarted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stm.GameStarted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stm.GameStarted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPromptsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.stm.Prompt.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Prompt prompts = 1;
 * @return {!Array.<!proto.stm.Prompt>}
 */
proto.stm.GameStarted.prototype.getPromptsList = function() {
  return /** @type{!Array.<!proto.stm.Prompt>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.stm.Prompt, 1));
};


/** @param {!Array.<!proto.stm.Prompt>} value */
proto.stm.GameStarted.prototype.setPromptsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.stm.Prompt=} opt_value
 * @param {number=} opt_index
 * @return {!proto.stm.Prompt}
 */
proto.stm.GameStarted.prototype.addPrompts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.stm.Prompt, opt_index);
};


proto.stm.GameStarted.prototype.clearPromptsList = function() {
  this.setPromptsList([]);
};


goog.object.extend(exports, proto.stm);
