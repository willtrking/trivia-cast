// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: thegame.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Player;
@class Room;
@class Round;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum PLAYER_STATE

typedef GPB_ENUM(PLAYER_STATE) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  PLAYER_STATE_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  PLAYER_STATE_Unknown = 0,
  PLAYER_STATE_Joined = 1,
  PLAYER_STATE_Playing = 2,
  PLAYER_STATE_Disconnected = 3,
};

GPBEnumDescriptor *PLAYER_STATE_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PLAYER_STATE_IsValidValue(int32_t value);

#pragma mark - ThegameRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface ThegameRoot : GPBRootObject
@end

#pragma mark - Room

typedef GPB_ENUM(Room_FieldNumber) {
  Room_FieldNumber_Id_p = 1,
};

@interface Room : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

@end

#pragma mark - CreateRoomReq

@interface CreateRoomReq : GPBMessage

@end

#pragma mark - RoomState

typedef GPB_ENUM(RoomState_FieldNumber) {
  RoomState_FieldNumber_Room = 1,
  RoomState_FieldNumber_PlayersArray = 2,
  RoomState_FieldNumber_CurrentRound = 3,
  RoomState_FieldNumber_RoundsArray = 4,
};

@interface RoomState : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) Room *room;
/** Test to see if @c room has been set. */
@property(nonatomic, readwrite) BOOL hasRoom;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Player*> *playersArray;
/** The number of items in @c playersArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger playersArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) Round *currentRound;
/** Test to see if @c currentRound has been set. */
@property(nonatomic, readwrite) BOOL hasCurrentRound;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Round*> *roundsArray;
/** The number of items in @c roundsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger roundsArray_Count;

@end

#pragma mark - Round

typedef GPB_ENUM(Round_FieldNumber) {
  Round_FieldNumber_Number = 1,
  Round_FieldNumber_Winner = 2,
  Round_FieldNumber_PlayersArray = 3,
};

@interface Round : GPBMessage

@property(nonatomic, readwrite) uint64_t number;

@property(nonatomic, readwrite, strong, null_resettable) Player *winner;
/** Test to see if @c winner has been set. */
@property(nonatomic, readwrite) BOOL hasWinner;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Player*> *playersArray;
/** The number of items in @c playersArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger playersArray_Count;

@end

#pragma mark - Player

typedef GPB_ENUM(Player_FieldNumber) {
  Player_FieldNumber_Id_p = 1,
  Player_FieldNumber_Name = 2,
  Player_FieldNumber_State = 3,
  Player_FieldNumber_Score = 4,
};

@interface Player : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite) PLAYER_STATE state;

@property(nonatomic, readwrite) int64_t score;

@end

/**
 * Fetches the raw value of a @c Player's @c state property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Player_State_RawValue(Player *message);
/**
 * Sets the raw value of an @c Player's @c state property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetPlayer_State_RawValue(Player *message, int32_t value);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
