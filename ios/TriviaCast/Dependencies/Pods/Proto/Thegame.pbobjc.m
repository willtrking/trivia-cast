// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: thegame.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Thegame.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ThegameRoot

@implementation ThegameRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ThegameRoot_FileDescriptor

static GPBFileDescriptor *ThegameRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"protobuf"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PLAYER_STATE

GPBEnumDescriptor *PLAYER_STATE_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000Joined\000Playing\000Disconnected\000";
    static const int32_t values[] = {
        PLAYER_STATE_Unknown,
        PLAYER_STATE_Joined,
        PLAYER_STATE_Playing,
        PLAYER_STATE_Disconnected,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PLAYER_STATE)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PLAYER_STATE_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PLAYER_STATE_IsValidValue(int32_t value__) {
  switch (value__) {
    case PLAYER_STATE_Unknown:
    case PLAYER_STATE_Joined:
    case PLAYER_STATE_Playing:
    case PLAYER_STATE_Disconnected:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Room

@implementation Room

@dynamic id_p;

typedef struct Room__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
} Room__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Room_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Room__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Room class]
                                     rootClass:[ThegameRoot class]
                                          file:ThegameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Room__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateRoomReq

@implementation CreateRoomReq


typedef struct CreateRoomReq__storage_ {
  uint32_t _has_storage_[1];
} CreateRoomReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateRoomReq class]
                                     rootClass:[ThegameRoot class]
                                          file:ThegameRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(CreateRoomReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RoomState

@implementation RoomState

@dynamic hasRoom, room;
@dynamic playersArray, playersArray_Count;
@dynamic hasCurrentRound, currentRound;
@dynamic roundsArray, roundsArray_Count;

typedef struct RoomState__storage_ {
  uint32_t _has_storage_[1];
  Room *room;
  NSMutableArray *playersArray;
  Round *currentRound;
  NSMutableArray *roundsArray;
} RoomState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "room",
        .dataTypeSpecific.className = GPBStringifySymbol(Room),
        .number = RoomState_FieldNumber_Room,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RoomState__storage_, room),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "playersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Player),
        .number = RoomState_FieldNumber_PlayersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RoomState__storage_, playersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "currentRound",
        .dataTypeSpecific.className = GPBStringifySymbol(Round),
        .number = RoomState_FieldNumber_CurrentRound,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RoomState__storage_, currentRound),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roundsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Round),
        .number = RoomState_FieldNumber_RoundsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RoomState__storage_, roundsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RoomState class]
                                     rootClass:[ThegameRoot class]
                                          file:ThegameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RoomState__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Round

@implementation Round

@dynamic number;
@dynamic hasWinner, winner;
@dynamic playersArray, playersArray_Count;

typedef struct Round__storage_ {
  uint32_t _has_storage_[1];
  Player *winner;
  NSMutableArray *playersArray;
  uint64_t number;
} Round__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "number",
        .dataTypeSpecific.className = NULL,
        .number = Round_FieldNumber_Number,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Round__storage_, number),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "winner",
        .dataTypeSpecific.className = GPBStringifySymbol(Player),
        .number = Round_FieldNumber_Winner,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Round__storage_, winner),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "playersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Player),
        .number = Round_FieldNumber_PlayersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Round__storage_, playersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Round class]
                                     rootClass:[ThegameRoot class]
                                          file:ThegameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Round__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Player

@implementation Player

@dynamic id_p;
@dynamic name;
@dynamic state;
@dynamic score;

typedef struct Player__storage_ {
  uint32_t _has_storage_[1];
  PLAYER_STATE state;
  NSString *id_p;
  NSString *name;
  int64_t score;
} Player__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Player_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Player__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = Player_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Player__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "state",
        .dataTypeSpecific.enumDescFunc = PLAYER_STATE_EnumDescriptor,
        .number = Player_FieldNumber_State,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Player__storage_, state),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = Player_FieldNumber_Score,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Player__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Player class]
                                     rootClass:[ThegameRoot class]
                                          file:ThegameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Player__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Player_State_RawValue(Player *message) {
  GPBDescriptor *descriptor = [Player descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Player_FieldNumber_State];
  return GPBGetMessageInt32Field(message, field);
}

void SetPlayer_State_RawValue(Player *message, int32_t value) {
  GPBDescriptor *descriptor = [Player descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Player_FieldNumber_State];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
